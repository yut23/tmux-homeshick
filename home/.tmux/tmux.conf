# Update environment variables when attaching to a session
# TODO: https://www.babushk.in/posts/renew-environment-tmux.html or so
set -g update-environment "SSH_CONNECTION SSH_CLIENT DISPLAY XAUTHORITY SESSION_MANAGER"
# reset shell nesting level
set-environment -g SHLVL 0

# Server options
# reduce time tmux waits to send commands after an escape is input
set -sg escape-time 50
# pass through any extended keys (only needed for 3.2a+)
set -sq extended-keys always

# Window options
# allow multiple clients to display windows from the same session in different sizes
set -wg aggressive-resize on
# enable vi keys for working with buffers
set -wg mode-keys vi
# allow mouse drags to enter copy mode and select text
#set -wg mode-mouse on
# watch for activity in windows so it can be indicated in the status bar
# (see visual-activity option below)
set -wg monitor-activity on
set -wg renumber-windows on # when one is deleted

# Start windows and panes at 1, not 0
set -g base-index 1
set -wg pane-base-index 1

# Increase scrollback buffer size from 2000 to 50000 lines
set -g history-limit 50000

# Prefix key
set -g prefix C-a     # instead of default C-b
unbind C-b            # don't want two prefix keys
bind C-a send-prefix  # press C-a twice to send to an app
set -g prefix2 C-q
bind C-q send-prefix -2 # press C-q twice to send to an app

# Key bindings
# fix key escape codes
set -wg xterm-keys on
bind C-d detach
# reload this file
bind r source-file ~/.tmux.conf \; display "reloaded"
# The line above replaces the default binding to the "refresh-client" command.
bind | split-window -h -c '#{pane_current_path}' # in addition to %
bind - split-window -v -c '#{pane_current_path}' # in addition to "
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# replaces clock-mode, which I never use
bind t new-window -a
# show all key bindings
unbind ?
bind ? list-keys
# show all key bindings, but with notes where available
# C-? would make more sense, but that's also backspace. C-/ is the same as C-_.
bind 'C-_' list-keys -Na

# vim-like keybindings for switching windows, entering copy mode, and pasting
unbind n
unbind p
bind [ previous-window
bind ] next-window
bind v copy-mode
# use bracketed paste
bind p paste-buffer -p

# Mouse options
set-option -g mouse on
# Scrolling the mouse wheel enters copy mode

# activate pane by clicking in it
#set -g mouse-select-pane on
# resize pane by dragging border
#set -g mouse-resize-pane on
# change window by clicking name in status bar
#set -g mouse-select-window on

# Color customizations
# use tmux-256color if available, and fall back to screen-256color
if-shell 'infocmp tmux-256color &>/dev/null' \
  'set -g default-terminal "tmux-256color"' \
  'set -g default-terminal "screen-256color"'
#set -g pane-border-style fg=black # default is "default" which is gray
set -ga terminal-overrides ",xterm-256color:Tc"

# Status bar
# default is black
set -g status-style fg=black
# update status bar every 2 seconds
set -g status-interval 2
# display window list in center of status bar
set -g status-justify centre
#set -g status-left "session #S window #I pane #P -"
set -g status-left-length 40
# hostname, day abbrev., month, day, year
set -g status-right "#h %a %m/%d/%y"
set -g status-right-length 45
# highlight window names in status bar on activity
set -g visual-activity on

set -wg status-left " #h | #S "
# append "| zoomed " in black on white at the end of the left status section,
# or padding in the same style as the main status bar (so the window names
# don't move around)
set -wg -a status-left "#{?window_zoomed_flag,| zoomed ,#[#{status-style}]         #[default]}"
set -wg status-left-style fg=black,bg=white

set -wg status-right " %d-%b-%y "
set -wg status-right-style fg=black,bg=white

set -wg window-status-format " #I: #W "

set -wg window-status-current-format " #I: #W "
set -wg window-status-current-style fg=black
#set -wg window-status-current-style fg=black,bg=colour235

#set -wg main-pane-width 135

# Smart pane switching with awareness of vim splits
is_vim='[[ "#{pane_current_command}" =~ (^|\/)(g?(view|n?vim?)(diff)?|sudoedit)$ || "#{pane_title}" =~ \ -\ N?VIM$ ]]'
# prevent variables from leaking into child processes
set-environment -gr is_vim

# better navigation for nested tmux instances
# from http://stahlke.org/dan/tmux-nested/
set -g status-style fg=black,bg=colour40
set -wg window-status-current-style fg=black,bg=white

# these bindings always apply to the outer instance
bind -n C-S-left  prev
bind -n C-S-right next

is_nested='#{m/r:(^|/)(ssh|tmux)$,#{pane_current_command}}'
set-environment -gr is_nested

# these run in the inner instance
bind -n M-F11 set status-style fg=black,bg=colour25
# reset status-style to default
bind -n M-F12 set -u status-style

# this controls, per-window, whether tmux should pass keys through or intercept them
set -wg @forward-to-inner 0
# these run in the outer instance
bind -n C-S-up {
  set -w @forward-to-inner 1
  if-shell -F "$is_nested" 'send-keys M-F12'
  set-hook -R session-window-changed
}
bind -n C-S-down {
  set -wu @forward-to-inner
  if-shell -F "$is_nested" 'send-keys M-F11'
  set-hook -R session-window-changed
}

# per-session option that keeps track of whether the session is currently
# configured to forward to inner instances
set -g @is-forwarding 0

set-hook -gw session-window-changed {
  if-shell -F '#{!=:#{@is-forwarding},#{@forward-to-inner}}' {
    if-shell -F '#{@forward-to-inner}' {
      # pass keys through to the inner instance
      set status-style fg=black,bg=colour25
      unbind -n C-h
      unbind -n C-j
      unbind -n C-k
      unbind -n C-l
      unbind -n 'C-\'
      unbind C-h
      unbind C-j
      unbind C-k
      unbind C-l
      unbind 'C-\'
      set prefix None
      set @is-forwarding 1
    } {
      # intercept keys to control the outer instance
      # reset to default
      set -u status-style
      bind -n C-h if-shell "$is_vim" { send-keys C-h } { select-pane -L }
      bind -n C-j if-shell "$is_vim" { send-keys C-j } { select-pane -D }
      bind -n C-k if-shell "$is_vim" { send-keys C-k } { select-pane -U }
      bind -n C-l if-shell "$is_vim" { send-keys C-l } { select-pane -R }
      bind -n 'C-\' if-shell "$is_vim" { send-keys 'C-\' } { select-pane -l }
      # use the prefix key to pass these through
      bind C-h send-keys C-h
      bind C-j send-keys C-j
      bind C-k send-keys C-k
      bind C-l send-keys C-l
      bind 'C-\' send-keys 'C-\'
      set prefix C-a
      set -u @is-forwarding
    }
  }
}

# run the session-window-changed hook when a new session is created (i.e. a new
# ssh connection or ~/bin/tmx invocation)
set-hook -g session-created {
  # set to something other than 0 or 1, to force reconfiguration
  set @is-forwarding 2
  set-hook -R session-window-changed
}

# remove conflicting copy-mode-vi bindings, so navigation works there too
# C-h is bound to cursor-left by default, presumably for alternate Backspace
unbind -T copy-mode-vi C-h
# C-j is bound to copy-pipe-and-cancel by default, same as Enter
unbind -T copy-mode-vi C-j

# Set up copy binds and hooks
# this will likely be a better way to do it, but is currently only supported in bleeding versions of tmux
#set-option -g copy-command '~/.tmux/clipboard/tmuxcopypush.sh'
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send-keys -X begin-selection
unbind-key -T copy-mode-vi y
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi Escape
bind-key -T copy-mode-vi Escape send-keys -X cancel
unbind-key -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi A
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi D
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode C-k
bind-key -T copy-mode C-k send-keys -X copy-end-of-line \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode C-w
bind-key -T copy-mode C-w send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode MouseDragEnd1Pane
bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode M-w
bind-key -T copy-mode M-w send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh

#set -g terminal-overrides 'xterm*:XT:smcup@:rmcup@'
# set terminal emulator window title
set -g set-titles on
# window title settings:
# If in an autotmux session group (ssh-$USER):
#   set the window title to $system_name if it's not empty, falling back to #{host} otherwise
# Otherwise, use the session group name if in a group, or "tmux/#{session_name}" if not
# In both cases, add the pane title at the end, which will be set to the window
# title of any nested sessions.
set -g set-titles-string "\
#{?#{==:#{session_group},ssh-$USER},\
#{?#{!=:$system_name,},$system_name,#{host}},\
#{?session_grouped,#{session_group},tmux/#{session_name}}\
}: #T"

# prevent variable from leaking into child processes
# this will make the server crash on tmux < 3.2 if this file is reloaded, due to https://github.com/tmux/tmux/pull/2304
#set-environment -gr system_name

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'
set -g @plugin 'yut23/tmux-update-env'

# split up tmux-resurrect sessions per-system
set -g @resurrect-dir "$HOME/.tmux/resurrect/${system_name}"

# scroll 5 lines per mouse wheel scroll event (terminator default)
set -g @scroll-speed-num-lines-per-scroll '5'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
