# Session options
# reduce time tmux waits to send commands after an escape is input
set -sg escape-time 50

# Window options
# allow multiple clients to display windows from the same session in different sizes
setw -g aggressive-resize on
# enable vi keys for working with buffers
setw -g mode-keys vi
# allow mouse drags to enter copy mode and select text
#setw -g mode-mouse on
# watch for activity in windows so it can be indicated in the status bar
# (see visual-activity option below)
setw -g monitor-activity on
setw -g renumber-windows on # when one is deleted

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Prefix key
set -g prefix C-a     # instead of default C-b
unbind C-b            # don't want two prefix keys
bind C-a send-prefix  # press C-a twice to send to an app

# Key bindings
# fix key escape codes
setw -g xterm-keys on
bind C-d detach
# reload this file
bind r source-file ~/.tmux.conf \; display "reloaded"
# The line above replaces the default binding to the "refresh-client" command.
bind | split-window -h -c '#{pane_current_path}' # in addition to %
bind - split-window -v -c '#{pane_current_path}' # in addition to "
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# replaces clock-mode, which I never use
bind t new-window -a
# use bracketed paste
bind ] paste-buffer -p
# show all key bindings
unbind ?
bind ? list-keys

# Mouse options
set-option -g mouse on
# Scrolling the mouse wheel enters copy mode

# activate pane by clicking in it
#set -g mouse-select-pane on
# resize pane by dragging border
#set -g mouse-resize-pane on
# change window by clicking name in status bar
#set -g mouse-select-window on

# Color customizations
# use tmux-256color if available, and fall back to screen-256color
if-shell 'infocmp tmux-256color &>/dev/null' \
  'set -g default-terminal "tmux-256color"' \
  'set -g default-terminal "screen-256color"'
#set -g pane-border-style fg=black # default is "default" which is gray
set -ga terminal-overrides ",xterm-256color:Tc"

# Status bar
# default is black
set -g status-style fg=black
# update status bar every 2 seconds
set -g status-interval 2
# display window list in center of status bar
set -g status-justify centre
#set -g status-left "session #S window #I pane #P -"
set -g status-left-length 40
# hostname, day abbrev., month, day, year
set -g status-right "#h %a %m/%d/%y"
set -g status-right-length 45
# highlight window names in status bar on activity
set -g visual-activity on

set-window-option -g status-left " #h | #S "
set-window-option -g status-left-style fg=black,bg=white

set-window-option -g status-right " %d-%b-%y "
set-window-option -g status-right-style fg=black,bg=white

set-window-option -g window-status-format " #I: #W "

set-window-option -g window-status-current-format " #I: #W "
set-window-option -g window-status-current-style fg=black
#set-window-option -g window-status-current-style fg=black,bg=colour235

#set-window-option -g main-pane-width 135

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)(g?(view|n?vim?)(diff)?|sudoedit)$"'
# prevent variables from leaking into child processes
set-environment -gr is_vim
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"

# better navigation for nested tmux sessions
# from http://stahlke.org/dan/tmux-nested/
set -g status-style fg=black,bg=colour40
setw -g window-status-current-style fg=black,bg=white

bind -n C-S-left  prev
bind -n C-S-right next

is_nested='echo "#{pane_current_command}" | grep -iqE "(^|\/)(ssh|tmux)$"'
set-environment -gr is_nested

bind -n M-F11 set -qg status-style fg=black,bg=colour25
bind -n M-F12 set -qg status-style fg=black,bg=colour40
# this binding runs in the outer session
bind -n C-up \
  if-shell "$is_nested" "send-keys M-F12" \; \
  set -qg status-style fg=black,bg=colour25 \; \
  unbind -n C-h \; \
  unbind -n C-j \; \
  unbind -n C-k \; \
  unbind -n C-l \; \
  unbind -n C-\ \; \
  set -qg prefix C-q \; \
  unbind -n C-S-left \; \
  unbind -n C-S-right
# this binding is received by the outer session first, which consumes it
bind -n C-down \
  if-shell "$is_nested" "send-keys M-F11" \; \
  set -qg status-style fg=black,bg=colour40 \; \
  bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L" \; \
  bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D" \; \
  bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U" \; \
  bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R" \; \
  bind -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l" \; \
  set -qg prefix C-a \; \
  bind -n C-S-left  prev \; \
  bind -n C-S-right next

# Set up copy binds and hooks
# this will likely be a better way to do it, but is currently only supported in bleeding versions of tmux
#set-option -g copy-command '~/.tmux/clipboard/tmuxcopypush.sh'
unbind-key -T copy-mode-vi C-j
bind-key -T copy-mode-vi C-j send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send-keys -X begin-selection
unbind-key -T copy-mode-vi y
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi Escape
bind-key -T copy-mode-vi Escape send-keys -X cancel
unbind-key -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi A
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi D
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode C-k
bind-key -T copy-mode C-k send-keys -X copy-end-of-line \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode C-w
bind-key -T copy-mode C-w send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode MouseDragEnd1Pane
bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh
unbind-key -T copy-mode M-w
bind-key -T copy-mode M-w send-keys -X copy-selection-and-cancel \; run-shell -b ~/.tmux/clipboard/tmuxcopypush.sh

#set -g terminal-overrides 'xterm*:XT:smcup@:rmcup@'
# set terminal emulator window title
set -g set-titles on
# use $system_name if it's not empty, and fall back to #{host}
set -g set-titles-string "#{?#{!=:$system_name,},$system_name,#{host}}: #T"

# prevent variable from leaking into child processes
set-environment -gr system_name

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'

# scroll 5 lines per mouse wheel scroll event (terminator default)
set -g @scroll-speed-num-lines-per-scroll "5"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
